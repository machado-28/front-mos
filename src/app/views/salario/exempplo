const Sequelize = require('sequelize');
const sequelize = new Sequelize('database', 'username', 'password', {
  dialect: 'mysql',
  host: 'localhost',
  port: 3306
});

// Definindo modelo para funcionários
const Employee = sequelize.define('Employee', {
  name: Sequelize.STRING,
  salary: Sequelize.FLOAT
});

// Definindo modelo para faltas
const Absence = sequelize.define('Absence', {
  date: Sequelize.DATE,
  hours_missed: Sequelize.FLOAT
});

// Definindo modelo para atrasos
const Delay = sequelize.define('Delay', {
  date: Sequelize.DATE,
  minutes_delayed: Sequelize.INTEGER
});

// Relacionamentos entre modelos
Employee.hasMany(Absence);
Employee.hasMany(Delay);

// Função para calcular o salário líquido de um funcionário
async function calcularSalarioLiquido(employeeId, month, year) {
  try {
    const employee = await Employee.findByPk(employeeId);
    if (!employee) throw new Error('Funcionário não encontrado');

    // Calculando total de faltas e atrasos no mês
    const absences = await Absence.findAll({
      where: {
        EmployeeId: employeeId,
        date: {
          [Sequelize.Op.and]: [
            Sequelize.where(Sequelize.fn('MONTH', Sequelize.col('date')), month),
            Sequelize.where(Sequelize.fn('YEAR', Sequelize.col('date')), year)
          ]
        }
      }
    });
    const totalAbsenceHours = absences.reduce((total, absence) => total + absence.hours_missed, 0);

    const delays = await Delay.findAll({
      where: {
        EmployeeId: employeeId,
        date: {
          [Sequelize.Op.and]: [
            Sequelize.where(Sequelize.fn('MONTH', Sequelize.col('date')), month),
            Sequelize.where(Sequelize.fn('YEAR', Sequelize.col('date')), year)
          ]
        }
      }
    });
    const totalDelayMinutes = delays.reduce((total, delay) => total + delay.minutes_delayed, 0);

    // Calculando salário líquido
    const totalHoursWorked = 160; // Assumindo 160 horas de trabalho por mês
    const
